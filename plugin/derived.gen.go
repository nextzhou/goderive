// Code generated by https://github.com/nextzhou/goderive. DO NOT EDIT.

package plugin

import (
	"encoding/json"
	"fmt"
	"reflect"
	"sort"
)

type Entries struct {
	elements []Entry
}

func NewEntries(capacity int) *Entries {
	return &Entries{
		elements: make([]Entry, 0, capacity),
	}
}

func NewEntriesFromSlice(slice []Entry) *Entries {
	return &Entries{
		elements: slice,
	}
}

func (s *Entries) Len() int {
	if s == nil {
		return 0
	}
	return len(s.elements)
}

func (s *Entries) IsEmpty() bool {
	return s.Len() == 0
}

func (s *Entries) Append(items ...Entry) {
	s.elements = append(s.elements, items...)
}

func (s *Entries) Clone() *Entries {
	cloned := &Entries{
		elements: make([]Entry, s.Len()),
	}
	copy(cloned.elements, s.elements)
	return cloned
}

func (s *Entries) ToSlice() []Entry {
	slice := make([]Entry, s.Len())
	copy(slice, s.elements)
	return slice
}

func (s *Entries) ToSliceRef() []Entry {
	return s.elements
}

func (s *Entries) Clear() {
	s.elements = s.elements[:0]
}

func (s *Entries) Insert(idx int, items ...Entry) {
	if idx < 0 {
		idx += s.Len()
	}
	if l := len(s.elements) + len(items); l > cap(s.elements) {
		// reallocate
		result := make([]Entry, l)
		copy(result, s.elements[:idx])
		copy(result[idx:], items)
		copy(result[idx+len(items):], s.elements[idx:])
		s.elements = result
		return
	}

	l := s.Len()
	s.elements = append(s.elements, items...)
	copy(s.elements[idx+len(items):], s.elements[idx:l])
	copy(s.elements[idx:], items)
}

func (s *Entries) Remove(idx int) {
	if idx < 0 {
		idx += s.Len()
	}
	s.elements = append(s.elements[:idx], s.elements[idx+1:]...)
}

func (s *Entries) RemoveRange(from, to int) {
	if from < 0 {
		from += s.Len()
	}
	if to < 0 {
		to += s.Len()
	}
	s.elements = append(s.elements[:from], s.elements[to+1:]...)
}

func (s *Entries) RemoveFrom(idx int) {
	if idx < 0 {
		idx += s.Len()
	}
	s.elements = s.elements[:idx]
}

func (s *Entries) RemoveTo(idx int) {
	if idx < 0 {
		idx += s.Len()
	}
	s.elements = s.elements[idx+1:]
}

func (s *Entries) Concat(another *Entries) *Entries {
	result := s.Clone()
	if another.IsEmpty() {
		return result
	}
	result.Append(another.elements...)
	return result
}

func (s *Entries) InPlaceConcat(another *Entries) {
	if another.IsEmpty() {
		return
	}
	s.Append(another.elements...)
}

func (s *Entries) ForEach(f func(Entry)) {
	if s.IsEmpty() {
		return
	}
	for _, item := range s.elements {
		f(item)
	}
}

func (s *Entries) ForEachWithIndex(f func(int, Entry)) {
	if s.IsEmpty() {
		return
	}
	for idx, item := range s.elements {
		f(idx, item)
	}
}

func (s *Entries) Filter(f func(Entry) bool) *Entries {
	result := NewEntries(0)
	for _, item := range s.elements {
		if f(item) {
			result.Append(item)
		}
	}
	return result
}

func (s *Entries) Index(idx int) *Entry {
	if idx < 0 {
		idx += s.Len()
	}
	return &s.elements[idx]
}

func (s *Entries) IndexRange(from, to int) *Entries {
	if from < 0 {
		from += s.Len()
	}
	if to < 0 {
		to += s.Len()
	}
	return NewEntriesFromSlice(s.elements[from:to])
}

func (s *Entries) IndexFrom(idx int) *Entries {
	if idx < 0 {
		idx += s.Len()
	}
	return NewEntriesFromSlice(s.elements[idx:])
}

func (s *Entries) IndexTo(idx int) *Entries {
	if idx < 0 {
		idx += s.Len()
	}
	return NewEntriesFromSlice(s.elements[:idx])
}

func (s *Entries) FindBy(f func(Entry) bool) int {
	if s.IsEmpty() {
		return -1
	}
	for idx, n := range s.elements {
		if f(n) {
			return idx
		}
	}
	return -1
}

func (s *Entries) FindLastBy(f func(Entry) bool) int {
	for idx := s.Len() - 1; idx >= 0; idx-- {
		if f(s.elements[idx]) {
			return idx
		}
	}
	return -1
}

func (s *Entries) CountBy(f func(Entry) bool) uint {
	count := uint(0)
	s.ForEach(func(item Entry) {
		if f(item) {
			count++
		}
	})
	return count
}

func (s *Entries) GroupByBool(f func(Entry) bool) (trueGroup, falseGroup *Entries) {
	trueGroup, falseGroup = NewEntries(0), NewEntries(0)
	s.ForEach(func(item Entry) {
		if f(item) {
			trueGroup.Append(item)
		} else {
			falseGroup.Append(item)
		}
	})
	return trueGroup, falseGroup
}

func (s Entries) GroupByStr(f func(Entry) string) map[string]*Entries {
	groups := make(map[string]*Entries)
	s.ForEach(func(item Entry) {
		key := f(item)
		group := groups[key]
		if group == nil {
			group = NewEntries(0)
			groups[key] = group
		}
		group.Append(item)
	})
	return groups
}

func (s Entries) GroupByInt(f func(Entry) int) map[int]*Entries {
	groups := make(map[int]*Entries)
	s.ForEach(func(item Entry) {
		key := f(item)
		group := groups[key]
		if group == nil {
			group = NewEntries(0)
			groups[key] = group
		}
		group.Append(item)
	})
	return groups
}

func (s *Entries) GroupBy(f func(Entry) interface{}) map[interface{}]*Entries {
	groups := make(map[interface{}]*Entries)
	s.ForEach(func(item Entry) {
		key := f(item)
		group := groups[key]
		if group == nil {
			group = NewEntries(0)
			groups[key] = group
		}
		group.Append(item)
	})
	return groups
}

// f: func(Entry) T
// return: []T
func (s *Entries) Map(f interface{}) interface{} {
	expected := "f should be func(Entry)T"
	ft := reflect.TypeOf(f)
	fVal := reflect.ValueOf(f)
	if ft.Kind() != reflect.Func {
		panic(expected)
	}
	if ft.NumIn() != 1 {
		panic(expected)
	}
	elemType := reflect.TypeOf(new(Entry)).Elem()
	if ft.In(0) != elemType {
		panic(expected)
	}
	if ft.NumOut() != 1 {
		panic(expected)
	}
	outType := ft.Out(0)
	result := reflect.MakeSlice(reflect.SliceOf(outType), 0, s.Len())
	s.ForEach(func(item Entry) {
		result = reflect.Append(result, fVal.Call([]reflect.Value{reflect.ValueOf(item)})[0])
	})
	return result.Interface()
}

// f: func(Entry) *T
//    func(Entry) (T, bool)
//    func(Entry) (T, error)
// return: []T
func (s *Entries) FilterMap(f interface{}) interface{} {
	expected := "f should be func(Entry) *T / func(Entry) (T, bool) / func(Entry) (T, error)"
	ft := reflect.TypeOf(f)
	fVal := reflect.ValueOf(f)
	if ft.Kind() != reflect.Func {
		panic(expected)
	}
	if ft.NumIn() != 1 {
		panic(expected)
	}
	in := ft.In(0)
	if in != reflect.TypeOf(new(Entry)).Elem() {
		panic(expected)
	}
	var outType reflect.Type
	var filter func([]reflect.Value) *reflect.Value
	if ft.NumOut() == 1 {
		// func(Entry) *T
		outType = ft.Out(0)
		if outType.Kind() != reflect.Ptr {
			panic(expected)
		}
		outType = outType.Elem()
		filter = func(values []reflect.Value) *reflect.Value {
			if values[0].IsNil() {
				return nil
			}
			val := values[0].Elem()
			return &val
		}
	} else if ft.NumOut() == 2 {
		outType = ft.Out(0)
		checker := ft.Out(1)
		if checker == reflect.TypeOf(true) {
			// func(Entry) (T, bool)
			filter = func(values []reflect.Value) *reflect.Value {
				if values[1].Interface().(bool) {
					return &values[0]
				}
				return nil
			}
		} else if checker.Implements(reflect.TypeOf((*error)(nil)).Elem()) {
			// func(Entry) (T, error)
			filter = func(values []reflect.Value) *reflect.Value {
				if values[1].IsNil() {
					return &values[0]
				}
				return nil
			}
		} else {
			panic(expected)
		}
	} else {
		panic(expected)
	}

	result := reflect.MakeSlice(reflect.SliceOf(outType), 0, s.Len())
	s.ForEach(func(item Entry) {
		ret := fVal.Call([]reflect.Value{reflect.ValueOf(item)})
		if val := filter(ret); val != nil {
			result = reflect.Append(result, *val)
		}
	})
	return result.Interface()
}

func (s *Entries) DoUntil(f func(Entry) bool) int {
	for idx, item := range s.elements {
		if f(item) {
			return idx
		}
	}
	return -1
}

func (s *Entries) DoWhile(f func(Entry) bool) int {
	for idx, item := range s.elements {
		if !f(item) {
			return idx
		}
	}
	return -1
}

func (s *Entries) DoUntilError(f func(Entry) error) error {
	for _, item := range s.elements {
		if err := f(item); err != nil {
			return err
		}
	}
	return nil
}

func (s *Entries) All(f func(Entry) bool) bool {
	for _, item := range s.elements {
		if !f(item) {
			return false
		}
	}
	return true
}

func (s *Entries) Any(f func(Entry) bool) bool {
	for _, item := range s.elements {
		if f(item) {
			return true
		}
	}
	return false
}

func (s *Entries) Reduce(f func(Entry, Entry) Entry) Entry {
	if s.IsEmpty() {
		var defaultVal Entry
		return defaultVal
	}
	ret := s.elements[0]
	for _, item := range s.elements[1:] {
		ret = f(ret, item)
	}
	return ret
}

func (s *Entries) Fold(init Entry, f func(Entry, Entry) Entry) Entry {
	if s.IsEmpty() {
		return init
	}
	for _, item := range s.elements {
		init = f(init, item)
	}
	return init
}

func (s *Entries) String() string {
	return fmt.Sprint(s.elements)
}

func (s Entries) MarshalJSON() ([]byte, error) {
	return json.Marshal(s.elements)
}

func (s *Entries) UnmarshalJSON(b []byte) error {
	return json.Unmarshal(b, &s.elements)
}

type ImportSet struct {
	cmp             func(i, j Import) bool
	elements        map[Import]uint32
	elementSequence []Import
}

func NewImportSet(capacity int, cmp func(i, j Import) bool) *ImportSet {
	set := new(ImportSet)
	if capacity > 0 {
		set.elements = make(map[Import]uint32, capacity)
		set.elementSequence = make([]Import, 0, capacity)
	} else {
		set.elements = make(map[Import]uint32)
	}
	set.cmp = cmp
	return set
}

func NewImportSetFromSlice(items []Import, cmp func(i, j Import) bool) *ImportSet {
	set := NewImportSet(len(items), cmp)
	for _, item := range items {
		set.Append(item)
	}
	return set
}

func (set *ImportSet) Len() int {
	if set == nil {
		return 0
	}
	return len(set.elements)
}

func (set *ImportSet) IsEmpty() bool {
	return set.Len() == 0
}

func (set *ImportSet) ToSlice() []Import {
	if set == nil {
		return nil
	}
	s := make([]Import, set.Len())
	copy(s, set.elementSequence)
	return s
}

// NOTICE: efficient but unsafe
func (set *ImportSet) ToSliceRef() []Import {
	return set.elementSequence
}

func (set *ImportSet) Append(keys ...Import) {
	for _, key := range keys {
		if _, ok := set.elements[key]; !ok {
			idx := sort.Search(len(set.elementSequence), func(i int) bool {
				return set.cmp(key, set.elementSequence[i])
			})
			l := len(set.elementSequence)
			set.elementSequence = append(set.elementSequence, key)
			for i := l; i > idx; i-- {
				set.elements[set.elementSequence[i]] = uint32(i + 1)
				set.elementSequence[i] = set.elementSequence[i-1]
			}
			set.elements[set.elementSequence[idx]] = uint32(idx + 1)
			set.elementSequence[idx] = key
			set.elements[key] = uint32(idx)
		}
	}
}

func (set *ImportSet) Clear() {
	set.elements = make(map[Import]uint32)
	set.elementSequence = set.elementSequence[:0]
}

func (set *ImportSet) Clone() *ImportSet {
	cloned := NewImportSet(set.Len(), set.cmp)
	for idx, item := range set.elementSequence {
		cloned.elements[item] = uint32(idx)
		cloned.elementSequence = append(cloned.elementSequence, item)
	}
	return cloned
}

func (set *ImportSet) Difference(another *ImportSet) *ImportSet {
	difference := NewImportSet(0, set.cmp)
	set.ForEach(func(item Import) {
		if !another.Contains(item) {
			difference.Append(item)
		}
	})
	return difference
}

func (set *ImportSet) Equal(another *ImportSet) bool {
	if set.Len() != another.Len() {
		return false
	}
	return set.ContainsAll(another.elementSequence...)
}

func (set *ImportSet) Intersect(another *ImportSet) *ImportSet {
	intersection := NewImportSet(0, set.cmp)
	if set.Len() < another.Len() {
		for item := range set.elements {
			if another.Contains(item) {
				intersection.Append(item)
			}
		}
	} else {
		for item := range another.elements {
			if set.Contains(item) {
				intersection.Append(item)
			}
		}
	}
	return intersection
}

func (set *ImportSet) Union(another *ImportSet) *ImportSet {
	union := set.Clone()
	union.InPlaceUnion(another)
	return union
}

func (set *ImportSet) InPlaceUnion(another *ImportSet) {
	another.ForEach(func(item Import) {
		set.Append(item)
	})
}

func (set *ImportSet) IsProperSubsetOf(another *ImportSet) bool {
	return !set.Equal(another) && set.IsSubsetOf(another)
}

func (set *ImportSet) IsProperSupersetOf(another *ImportSet) bool {
	return !set.Equal(another) && set.IsSupersetOf(another)
}

func (set *ImportSet) IsSubsetOf(another *ImportSet) bool {
	if set.Len() > another.Len() {
		return false
	}
	for item := range set.elements {
		if !another.Contains(item) {
			return false
		}
	}
	return true
}

func (set *ImportSet) IsSupersetOf(another *ImportSet) bool {
	return another.IsSubsetOf(set)
}

func (set *ImportSet) ForEach(f func(Import)) {
	if set.IsEmpty() {
		return
	}
	for _, item := range set.elementSequence {
		f(item)
	}
}

func (set *ImportSet) ForEachWithIndex(f func(int, Import)) {
	if set.IsEmpty() {
		return
	}
	for idx, item := range set.elementSequence {
		f(idx, item)
	}
}

func (set *ImportSet) Filter(f func(Import) bool) *ImportSet {
	result := NewImportSet(0, set.cmp)
	set.ForEach(func(item Import) {
		if f(item) {
			result.Append(item)
		}
	})
	return result
}

func (set *ImportSet) Remove(key Import) {
	if idx, ok := set.elements[key]; ok {
		l := set.Len()
		delete(set.elements, key)
		for ; idx < uint32(l-1); idx++ {
			item := set.elementSequence[idx+1]
			set.elementSequence[idx] = item
			set.elements[item] = idx
		}
		set.elementSequence = set.elementSequence[:l-1]
	}
}

func (set *ImportSet) Contains(key Import) bool {
	_, ok := set.elements[key]
	return ok
}

func (set *ImportSet) ContainsAny(keys ...Import) bool {
	for _, key := range keys {
		if set.Contains(key) {
			return true
		}
	}
	return false
}

func (set *ImportSet) ContainsAll(keys ...Import) bool {
	for _, key := range keys {
		if !set.Contains(key) {
			return false
		}
	}
	return true
}

func (set *ImportSet) DoUntil(f func(Import) bool) int {
	for idx, item := range set.elementSequence {
		if f(item) {
			return idx
		}
	}
	return -1
}

func (set *ImportSet) DoWhile(f func(Import) bool) int {
	for idx, item := range set.elementSequence {
		if !f(item) {
			return idx
		}
	}
	return -1
}

func (set *ImportSet) DoUntilError(f func(Import) error) error {
	for _, item := range set.elementSequence {
		if err := f(item); err != nil {
			return err
		}
	}
	return nil
}

func (set *ImportSet) All(f func(Import) bool) bool {
	for item := range set.elements {
		if !f(item) {
			return false
		}
	}
	return true
}

func (set *ImportSet) Any(f func(Import) bool) bool {
	for item := range set.elements {
		if f(item) {
			return true
		}
	}
	return false
}

func (set *ImportSet) FindBy(f func(Import) bool) *Import {
	for _, item := range set.elementSequence {
		if f(item) {
			return &item
		}
	}
	return nil
}

func (set *ImportSet) FindLastBy(f func(Import) bool) *Import {
	for i := set.Len() - 1; i >= 0; i-- {
		if item := set.elementSequence[i]; f(item) {
			return &item
		}
	}
	return nil
}

func (set *ImportSet) CountBy(f func(Import) bool) int {
	count := 0
	set.ForEach(func(item Import) {
		if f(item) {
			count++
		}
	})
	return count
}

func (set *ImportSet) GroupByBool(f func(Import) bool) (trueGroup *ImportSet, falseGroup *ImportSet) {
	trueGroup, falseGroup = NewImportSet(0, set.cmp), NewImportSet(0, set.cmp)
	set.ForEach(func(item Import) {
		if f(item) {
			trueGroup.Append(item)
		} else {
			falseGroup.Append(item)
		}
	})
	return trueGroup, falseGroup
}

func (set *ImportSet) GroupByStr(f func(Import) string) map[string]*ImportSet {
	groups := make(map[string]*ImportSet)
	set.ForEach(func(item Import) {
		key := f(item)
		group := groups[key]
		if group == nil {
			group = NewImportSet(0, set.cmp)
			groups[key] = group
		}
		group.Append(item)
	})
	return groups
}

func (set *ImportSet) GroupByInt(f func(Import) int) map[int]*ImportSet {
	groups := make(map[int]*ImportSet)
	set.ForEach(func(item Import) {
		key := f(item)
		group := groups[key]
		if group == nil {
			group = NewImportSet(0, set.cmp)
			groups[key] = group
		}
		group.Append(item)
	})
	return groups
}

func (set *ImportSet) GroupBy(f func(Import) interface{}) map[interface{}]*ImportSet {
	groups := make(map[interface{}]*ImportSet)
	set.ForEach(func(item Import) {
		key := f(item)
		group := groups[key]
		if group == nil {
			group = NewImportSet(0, set.cmp)
			groups[key] = group
		}
		group.Append(item)
	})
	return groups
}

// f: func(Import) T
// return: []T
func (set *ImportSet) Map(f interface{}) interface{} {
	expected := "f should be func(Import)T"
	ft := reflect.TypeOf(f)
	fVal := reflect.ValueOf(f)
	if ft.Kind() != reflect.Func {
		panic(expected)
	}
	if ft.NumIn() != 1 {
		panic(expected)
	}
	elemType := reflect.TypeOf(new(Import)).Elem()
	if ft.In(0) != elemType {
		panic(expected)
	}
	if ft.NumOut() != 1 {
		panic(expected)
	}
	outType := ft.Out(0)
	result := reflect.MakeSlice(reflect.SliceOf(outType), 0, set.Len())
	set.ForEach(func(item Import) {
		result = reflect.Append(result, fVal.Call([]reflect.Value{reflect.ValueOf(item)})[0])
	})
	return result.Interface()
}

// f: func(Import) *T
//    func(Import) (T, bool)
//    func(Import) (T, error)
// return: []T
func (set *ImportSet) FilterMap(f interface{}) interface{} {
	expected := "f should be func(Import) *T / func(Import) (T, bool) / func(Import) (T, error)"
	ft := reflect.TypeOf(f)
	fVal := reflect.ValueOf(f)
	if ft.Kind() != reflect.Func {
		panic(expected)
	}
	if ft.NumIn() != 1 {
		panic(expected)
	}
	in := ft.In(0)
	if in != reflect.TypeOf(new(Import)).Elem() {
		panic(expected)
	}
	var outType reflect.Type
	var filter func([]reflect.Value) *reflect.Value
	if ft.NumOut() == 1 {
		// func(Import) *T
		outType = ft.Out(0)
		if outType.Kind() != reflect.Ptr {
			panic(expected)
		}
		outType = outType.Elem()
		filter = func(values []reflect.Value) *reflect.Value {
			if values[0].IsNil() {
				return nil
			}
			val := values[0].Elem()
			return &val
		}
	} else if ft.NumOut() == 2 {
		outType = ft.Out(0)
		checker := ft.Out(1)
		if checker == reflect.TypeOf(true) {
			// func(Import) (T, bool)
			filter = func(values []reflect.Value) *reflect.Value {
				if values[1].Interface().(bool) {
					return &values[0]
				}
				return nil
			}
		} else if checker.Implements(reflect.TypeOf((*error)(nil)).Elem()) {
			// func(Import) (T, error)
			filter = func(values []reflect.Value) *reflect.Value {
				if values[1].IsNil() {
					return &values[0]
				}
				return nil
			}
		} else {
			panic(expected)
		}
	} else {
		panic(expected)
	}

	result := reflect.MakeSlice(reflect.SliceOf(outType), 0, set.Len())
	set.ForEach(func(item Import) {
		ret := fVal.Call([]reflect.Value{reflect.ValueOf(item)})
		if val := filter(ret); val != nil {
			result = reflect.Append(result, *val)
		}
	})
	return result.Interface()
}

func (set *ImportSet) Reduce(f func(Import, Import) Import) Import {
	if set.IsEmpty() {
		var defaultVal Import
		return defaultVal
	}
	ret := set.elementSequence[0]
	for _, item := range set.elementSequence[1:] {
		ret = f(ret, item)
	}
	return ret
}

func (set *ImportSet) Fold(init Import, f func(Import, Import) Import) Import {
	if set.IsEmpty() {
		return init
	}
	for _, item := range set.elementSequence {
		init = f(init, item)
	}
	return init
}

func (set *ImportSet) String() string {
	return fmt.Sprint(set.elementSequence)
}

func (set ImportSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(set.ToSlice())
}

func (set *ImportSet) UnmarshalJSON(b []byte) error {
	return fmt.Errorf("unsupported")
}

type PluginSet struct {
	elements        map[Plugin]uint32
	elementSequence []Plugin
}

func NewPluginSet(capacity int) *PluginSet {
	set := new(PluginSet)
	if capacity > 0 {
		set.elements = make(map[Plugin]uint32, capacity)
		set.elementSequence = make([]Plugin, 0, capacity)
	} else {
		set.elements = make(map[Plugin]uint32)
	}
	return set
}

func NewPluginSetFromSlice(items []Plugin) *PluginSet {
	set := NewPluginSet(len(items))
	for _, item := range items {
		set.Append(item)
	}
	return set
}

func (set *PluginSet) Len() int {
	if set == nil {
		return 0
	}
	return len(set.elements)
}

func (set *PluginSet) IsEmpty() bool {
	return set.Len() == 0
}

func (set *PluginSet) ToSlice() []Plugin {
	if set == nil {
		return nil
	}
	s := make([]Plugin, set.Len())
	copy(s, set.elementSequence)
	return s
}

// NOTICE: efficient but unsafe
func (set *PluginSet) ToSliceRef() []Plugin {
	return set.elementSequence
}

func (set *PluginSet) Append(keys ...Plugin) {
	for _, key := range keys {
		if _, ok := set.elements[key]; !ok {
			set.elements[key] = uint32(len(set.elementSequence))
			set.elementSequence = append(set.elementSequence, key)
		}
	}
}

func (set *PluginSet) Clear() {
	set.elements = make(map[Plugin]uint32)
	set.elementSequence = set.elementSequence[:0]
}

func (set *PluginSet) Clone() *PluginSet {
	cloned := NewPluginSet(set.Len())
	for idx, item := range set.elementSequence {
		cloned.elements[item] = uint32(idx)
		cloned.elementSequence = append(cloned.elementSequence, item)
	}
	return cloned
}

func (set *PluginSet) Difference(another *PluginSet) *PluginSet {
	difference := NewPluginSet(0)
	set.ForEach(func(item Plugin) {
		if !another.Contains(item) {
			difference.Append(item)
		}
	})
	return difference
}

func (set *PluginSet) Equal(another *PluginSet) bool {
	if set.Len() != another.Len() {
		return false
	}
	return set.ContainsAll(another.elementSequence...)
}

// TODO keep order
func (set *PluginSet) Intersect(another *PluginSet) *PluginSet {
	intersection := NewPluginSet(0)
	if set.Len() < another.Len() {
		for item := range set.elements {
			if another.Contains(item) {
				intersection.Append(item)
			}
		}
	} else {
		for item := range another.elements {
			if set.Contains(item) {
				intersection.Append(item)
			}
		}
	}
	return intersection
}

func (set *PluginSet) Union(another *PluginSet) *PluginSet {
	union := set.Clone()
	union.InPlaceUnion(another)
	return union
}

func (set *PluginSet) InPlaceUnion(another *PluginSet) {
	another.ForEach(func(item Plugin) {
		set.Append(item)
	})
}

func (set *PluginSet) IsProperSubsetOf(another *PluginSet) bool {
	return !set.Equal(another) && set.IsSubsetOf(another)
}

func (set *PluginSet) IsProperSupersetOf(another *PluginSet) bool {
	return !set.Equal(another) && set.IsSupersetOf(another)
}

func (set *PluginSet) IsSubsetOf(another *PluginSet) bool {
	if set.Len() > another.Len() {
		return false
	}
	for item := range set.elements {
		if !another.Contains(item) {
			return false
		}
	}
	return true
}

func (set *PluginSet) IsSupersetOf(another *PluginSet) bool {
	return another.IsSubsetOf(set)
}

func (set *PluginSet) ForEach(f func(Plugin)) {
	if set.IsEmpty() {
		return
	}
	for _, item := range set.elementSequence {
		f(item)
	}
}

func (set *PluginSet) ForEachWithIndex(f func(int, Plugin)) {
	if set.IsEmpty() {
		return
	}
	for idx, item := range set.elementSequence {
		f(idx, item)
	}
}

func (set *PluginSet) Filter(f func(Plugin) bool) *PluginSet {
	result := NewPluginSet(0)
	set.ForEach(func(item Plugin) {
		if f(item) {
			result.Append(item)
		}
	})
	return result
}

func (set *PluginSet) Remove(key Plugin) {
	if idx, ok := set.elements[key]; ok {
		l := set.Len()
		delete(set.elements, key)
		for ; idx < uint32(l-1); idx++ {
			item := set.elementSequence[idx+1]
			set.elementSequence[idx] = item
			set.elements[item] = idx
		}
		set.elementSequence = set.elementSequence[:l-1]
	}
}

func (set *PluginSet) Contains(key Plugin) bool {
	_, ok := set.elements[key]
	return ok
}

func (set *PluginSet) ContainsAny(keys ...Plugin) bool {
	for _, key := range keys {
		if set.Contains(key) {
			return true
		}
	}
	return false
}

func (set *PluginSet) ContainsAll(keys ...Plugin) bool {
	for _, key := range keys {
		if !set.Contains(key) {
			return false
		}
	}
	return true
}

func (set *PluginSet) DoUntil(f func(Plugin) bool) int {
	for idx, item := range set.elementSequence {
		if f(item) {
			return idx
		}
	}
	return -1
}

func (set *PluginSet) DoWhile(f func(Plugin) bool) int {
	for idx, item := range set.elementSequence {
		if !f(item) {
			return idx
		}
	}
	return -1
}

func (set *PluginSet) DoUntilError(f func(Plugin) error) error {
	for _, item := range set.elementSequence {
		if err := f(item); err != nil {
			return err
		}
	}
	return nil
}

func (set *PluginSet) All(f func(Plugin) bool) bool {
	for item := range set.elements {
		if !f(item) {
			return false
		}
	}
	return true
}

func (set *PluginSet) Any(f func(Plugin) bool) bool {
	for item := range set.elements {
		if f(item) {
			return true
		}
	}
	return false
}

func (set *PluginSet) FindBy(f func(Plugin) bool) *Plugin {
	for _, item := range set.elementSequence {
		if f(item) {
			return &item
		}
	}
	return nil
}

func (set *PluginSet) FindLastBy(f func(Plugin) bool) *Plugin {
	for i := set.Len() - 1; i >= 0; i-- {
		if item := set.elementSequence[i]; f(item) {
			return &item
		}
	}
	return nil
}

func (set *PluginSet) CountBy(f func(Plugin) bool) int {
	count := 0
	set.ForEach(func(item Plugin) {
		if f(item) {
			count++
		}
	})
	return count
}

func (set *PluginSet) GroupByBool(f func(Plugin) bool) (trueGroup *PluginSet, falseGroup *PluginSet) {
	trueGroup, falseGroup = NewPluginSet(0), NewPluginSet(0)
	set.ForEach(func(item Plugin) {
		if f(item) {
			trueGroup.Append(item)
		} else {
			falseGroup.Append(item)
		}
	})
	return trueGroup, falseGroup
}

func (set *PluginSet) GroupByStr(f func(Plugin) string) map[string]*PluginSet {
	groups := make(map[string]*PluginSet)
	set.ForEach(func(item Plugin) {
		key := f(item)
		group := groups[key]
		if group == nil {
			group = NewPluginSet(0)
			groups[key] = group
		}
		group.Append(item)
	})
	return groups
}

func (set *PluginSet) GroupByInt(f func(Plugin) int) map[int]*PluginSet {
	groups := make(map[int]*PluginSet)
	set.ForEach(func(item Plugin) {
		key := f(item)
		group := groups[key]
		if group == nil {
			group = NewPluginSet(0)
			groups[key] = group
		}
		group.Append(item)
	})
	return groups
}

func (set *PluginSet) GroupBy(f func(Plugin) interface{}) map[interface{}]*PluginSet {
	groups := make(map[interface{}]*PluginSet)
	set.ForEach(func(item Plugin) {
		key := f(item)
		group := groups[key]
		if group == nil {
			group = NewPluginSet(0)
			groups[key] = group
		}
		group.Append(item)
	})
	return groups
}

// f: func(Plugin) T
// return: []T
func (set *PluginSet) Map(f interface{}) interface{} {
	expected := "f should be func(Plugin)T"
	ft := reflect.TypeOf(f)
	fVal := reflect.ValueOf(f)
	if ft.Kind() != reflect.Func {
		panic(expected)
	}
	if ft.NumIn() != 1 {
		panic(expected)
	}
	elemType := reflect.TypeOf(new(Plugin)).Elem()
	if ft.In(0) != elemType {
		panic(expected)
	}
	if ft.NumOut() != 1 {
		panic(expected)
	}
	outType := ft.Out(0)
	result := reflect.MakeSlice(reflect.SliceOf(outType), 0, set.Len())
	set.ForEach(func(item Plugin) {
		result = reflect.Append(result, fVal.Call([]reflect.Value{reflect.ValueOf(item)})[0])
	})
	return result.Interface()
}

// f: func(Plugin) *T
//    func(Plugin) (T, bool)
//    func(Plugin) (T, error)
// return: []T
func (set *PluginSet) FilterMap(f interface{}) interface{} {
	expected := "f should be func(Plugin) *T / func(Plugin) (T, bool) / func(Plugin) (T, error)"
	ft := reflect.TypeOf(f)
	fVal := reflect.ValueOf(f)
	if ft.Kind() != reflect.Func {
		panic(expected)
	}
	if ft.NumIn() != 1 {
		panic(expected)
	}
	in := ft.In(0)
	if in != reflect.TypeOf(new(Plugin)).Elem() {
		panic(expected)
	}
	var outType reflect.Type
	var filter func([]reflect.Value) *reflect.Value
	if ft.NumOut() == 1 {
		// func(Plugin) *T
		outType = ft.Out(0)
		if outType.Kind() != reflect.Ptr {
			panic(expected)
		}
		outType = outType.Elem()
		filter = func(values []reflect.Value) *reflect.Value {
			if values[0].IsNil() {
				return nil
			}
			val := values[0].Elem()
			return &val
		}
	} else if ft.NumOut() == 2 {
		outType = ft.Out(0)
		checker := ft.Out(1)
		if checker == reflect.TypeOf(true) {
			// func(Plugin) (T, bool)
			filter = func(values []reflect.Value) *reflect.Value {
				if values[1].Interface().(bool) {
					return &values[0]
				}
				return nil
			}
		} else if checker.Implements(reflect.TypeOf((*error)(nil)).Elem()) {
			// func(Plugin) (T, error)
			filter = func(values []reflect.Value) *reflect.Value {
				if values[1].IsNil() {
					return &values[0]
				}
				return nil
			}
		} else {
			panic(expected)
		}
	} else {
		panic(expected)
	}

	result := reflect.MakeSlice(reflect.SliceOf(outType), 0, set.Len())
	set.ForEach(func(item Plugin) {
		ret := fVal.Call([]reflect.Value{reflect.ValueOf(item)})
		if val := filter(ret); val != nil {
			result = reflect.Append(result, *val)
		}
	})
	return result.Interface()
}

func (set *PluginSet) Reduce(f func(Plugin, Plugin) Plugin) Plugin {
	if set.IsEmpty() {
		var defaultVal Plugin
		return defaultVal
	}
	ret := set.elementSequence[0]
	for _, item := range set.elementSequence[1:] {
		ret = f(ret, item)
	}
	return ret
}

func (set *PluginSet) Fold(init Plugin, f func(Plugin, Plugin) Plugin) Plugin {
	if set.IsEmpty() {
		return init
	}
	for _, item := range set.elementSequence {
		init = f(init, item)
	}
	return init
}

func (set *PluginSet) String() string {
	return fmt.Sprint(set.elementSequence)
}

func (set PluginSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(set.ToSlice())
}

func (set *PluginSet) UnmarshalJSON(b []byte) error {
	s := make([]Plugin, 0)
	err := json.Unmarshal(b, &s)
	if err != nil {
		return err
	}
	*set = *NewPluginSetFromSlice(s)
	return nil
}

type ValueSet struct {
	elements        map[Value]uint32
	elementSequence []Value
}

func NewValueSet(capacity int) *ValueSet {
	set := new(ValueSet)
	if capacity > 0 {
		set.elements = make(map[Value]uint32, capacity)
		set.elementSequence = make([]Value, 0, capacity)
	} else {
		set.elements = make(map[Value]uint32)
	}
	return set
}

func NewValueSetFromSlice(items []Value) *ValueSet {
	set := NewValueSet(len(items))
	for _, item := range items {
		set.Append(item)
	}
	return set
}

func (set *ValueSet) Len() int {
	if set == nil {
		return 0
	}
	return len(set.elements)
}

func (set *ValueSet) IsEmpty() bool {
	return set.Len() == 0
}

func (set *ValueSet) ToSlice() []Value {
	if set == nil {
		return nil
	}
	s := make([]Value, set.Len())
	copy(s, set.elementSequence)
	return s
}

// NOTICE: efficient but unsafe
func (set *ValueSet) ToSliceRef() []Value {
	return set.elementSequence
}

func (set *ValueSet) Append(keys ...Value) {
	for _, key := range keys {
		if _, ok := set.elements[key]; !ok {
			set.elements[key] = uint32(len(set.elementSequence))
			set.elementSequence = append(set.elementSequence, key)
		}
	}
}

func (set *ValueSet) Clear() {
	set.elements = make(map[Value]uint32)
	set.elementSequence = set.elementSequence[:0]
}

func (set *ValueSet) Clone() *ValueSet {
	cloned := NewValueSet(set.Len())
	for idx, item := range set.elementSequence {
		cloned.elements[item] = uint32(idx)
		cloned.elementSequence = append(cloned.elementSequence, item)
	}
	return cloned
}

func (set *ValueSet) Difference(another *ValueSet) *ValueSet {
	difference := NewValueSet(0)
	set.ForEach(func(item Value) {
		if !another.Contains(item) {
			difference.Append(item)
		}
	})
	return difference
}

func (set *ValueSet) Equal(another *ValueSet) bool {
	if set.Len() != another.Len() {
		return false
	}
	return set.ContainsAll(another.elementSequence...)
}

// TODO keep order
func (set *ValueSet) Intersect(another *ValueSet) *ValueSet {
	intersection := NewValueSet(0)
	if set.Len() < another.Len() {
		for item := range set.elements {
			if another.Contains(item) {
				intersection.Append(item)
			}
		}
	} else {
		for item := range another.elements {
			if set.Contains(item) {
				intersection.Append(item)
			}
		}
	}
	return intersection
}

func (set *ValueSet) Union(another *ValueSet) *ValueSet {
	union := set.Clone()
	union.InPlaceUnion(another)
	return union
}

func (set *ValueSet) InPlaceUnion(another *ValueSet) {
	another.ForEach(func(item Value) {
		set.Append(item)
	})
}

func (set *ValueSet) IsProperSubsetOf(another *ValueSet) bool {
	return !set.Equal(another) && set.IsSubsetOf(another)
}

func (set *ValueSet) IsProperSupersetOf(another *ValueSet) bool {
	return !set.Equal(another) && set.IsSupersetOf(another)
}

func (set *ValueSet) IsSubsetOf(another *ValueSet) bool {
	if set.Len() > another.Len() {
		return false
	}
	for item := range set.elements {
		if !another.Contains(item) {
			return false
		}
	}
	return true
}

func (set *ValueSet) IsSupersetOf(another *ValueSet) bool {
	return another.IsSubsetOf(set)
}

func (set *ValueSet) ForEach(f func(Value)) {
	if set.IsEmpty() {
		return
	}
	for _, item := range set.elementSequence {
		f(item)
	}
}

func (set *ValueSet) ForEachWithIndex(f func(int, Value)) {
	if set.IsEmpty() {
		return
	}
	for idx, item := range set.elementSequence {
		f(idx, item)
	}
}

func (set *ValueSet) Filter(f func(Value) bool) *ValueSet {
	result := NewValueSet(0)
	set.ForEach(func(item Value) {
		if f(item) {
			result.Append(item)
		}
	})
	return result
}

func (set *ValueSet) Remove(key Value) {
	if idx, ok := set.elements[key]; ok {
		l := set.Len()
		delete(set.elements, key)
		for ; idx < uint32(l-1); idx++ {
			item := set.elementSequence[idx+1]
			set.elementSequence[idx] = item
			set.elements[item] = idx
		}
		set.elementSequence = set.elementSequence[:l-1]
	}
}

func (set *ValueSet) Contains(key Value) bool {
	_, ok := set.elements[key]
	return ok
}

func (set *ValueSet) ContainsAny(keys ...Value) bool {
	for _, key := range keys {
		if set.Contains(key) {
			return true
		}
	}
	return false
}

func (set *ValueSet) ContainsAll(keys ...Value) bool {
	for _, key := range keys {
		if !set.Contains(key) {
			return false
		}
	}
	return true
}

func (set *ValueSet) DoUntil(f func(Value) bool) int {
	for idx, item := range set.elementSequence {
		if f(item) {
			return idx
		}
	}
	return -1
}

func (set *ValueSet) DoWhile(f func(Value) bool) int {
	for idx, item := range set.elementSequence {
		if !f(item) {
			return idx
		}
	}
	return -1
}

func (set *ValueSet) DoUntilError(f func(Value) error) error {
	for _, item := range set.elementSequence {
		if err := f(item); err != nil {
			return err
		}
	}
	return nil
}

func (set *ValueSet) All(f func(Value) bool) bool {
	for item := range set.elements {
		if !f(item) {
			return false
		}
	}
	return true
}

func (set *ValueSet) Any(f func(Value) bool) bool {
	for item := range set.elements {
		if f(item) {
			return true
		}
	}
	return false
}

func (set *ValueSet) FindBy(f func(Value) bool) *Value {
	for _, item := range set.elementSequence {
		if f(item) {
			return &item
		}
	}
	return nil
}

func (set *ValueSet) FindLastBy(f func(Value) bool) *Value {
	for i := set.Len() - 1; i >= 0; i-- {
		if item := set.elementSequence[i]; f(item) {
			return &item
		}
	}
	return nil
}

func (set *ValueSet) CountBy(f func(Value) bool) int {
	count := 0
	set.ForEach(func(item Value) {
		if f(item) {
			count++
		}
	})
	return count
}

func (set *ValueSet) GroupByBool(f func(Value) bool) (trueGroup *ValueSet, falseGroup *ValueSet) {
	trueGroup, falseGroup = NewValueSet(0), NewValueSet(0)
	set.ForEach(func(item Value) {
		if f(item) {
			trueGroup.Append(item)
		} else {
			falseGroup.Append(item)
		}
	})
	return trueGroup, falseGroup
}

func (set *ValueSet) GroupByStr(f func(Value) string) map[string]*ValueSet {
	groups := make(map[string]*ValueSet)
	set.ForEach(func(item Value) {
		key := f(item)
		group := groups[key]
		if group == nil {
			group = NewValueSet(0)
			groups[key] = group
		}
		group.Append(item)
	})
	return groups
}

func (set *ValueSet) GroupByInt(f func(Value) int) map[int]*ValueSet {
	groups := make(map[int]*ValueSet)
	set.ForEach(func(item Value) {
		key := f(item)
		group := groups[key]
		if group == nil {
			group = NewValueSet(0)
			groups[key] = group
		}
		group.Append(item)
	})
	return groups
}

func (set *ValueSet) GroupBy(f func(Value) interface{}) map[interface{}]*ValueSet {
	groups := make(map[interface{}]*ValueSet)
	set.ForEach(func(item Value) {
		key := f(item)
		group := groups[key]
		if group == nil {
			group = NewValueSet(0)
			groups[key] = group
		}
		group.Append(item)
	})
	return groups
}

// f: func(Value) T
// return: []T
func (set *ValueSet) Map(f interface{}) interface{} {
	expected := "f should be func(Value)T"
	ft := reflect.TypeOf(f)
	fVal := reflect.ValueOf(f)
	if ft.Kind() != reflect.Func {
		panic(expected)
	}
	if ft.NumIn() != 1 {
		panic(expected)
	}
	elemType := reflect.TypeOf(new(Value)).Elem()
	if ft.In(0) != elemType {
		panic(expected)
	}
	if ft.NumOut() != 1 {
		panic(expected)
	}
	outType := ft.Out(0)
	result := reflect.MakeSlice(reflect.SliceOf(outType), 0, set.Len())
	set.ForEach(func(item Value) {
		result = reflect.Append(result, fVal.Call([]reflect.Value{reflect.ValueOf(item)})[0])
	})
	return result.Interface()
}

// f: func(Value) *T
//    func(Value) (T, bool)
//    func(Value) (T, error)
// return: []T
func (set *ValueSet) FilterMap(f interface{}) interface{} {
	expected := "f should be func(Value) *T / func(Value) (T, bool) / func(Value) (T, error)"
	ft := reflect.TypeOf(f)
	fVal := reflect.ValueOf(f)
	if ft.Kind() != reflect.Func {
		panic(expected)
	}
	if ft.NumIn() != 1 {
		panic(expected)
	}
	in := ft.In(0)
	if in != reflect.TypeOf(new(Value)).Elem() {
		panic(expected)
	}
	var outType reflect.Type
	var filter func([]reflect.Value) *reflect.Value
	if ft.NumOut() == 1 {
		// func(Value) *T
		outType = ft.Out(0)
		if outType.Kind() != reflect.Ptr {
			panic(expected)
		}
		outType = outType.Elem()
		filter = func(values []reflect.Value) *reflect.Value {
			if values[0].IsNil() {
				return nil
			}
			val := values[0].Elem()
			return &val
		}
	} else if ft.NumOut() == 2 {
		outType = ft.Out(0)
		checker := ft.Out(1)
		if checker == reflect.TypeOf(true) {
			// func(Value) (T, bool)
			filter = func(values []reflect.Value) *reflect.Value {
				if values[1].Interface().(bool) {
					return &values[0]
				}
				return nil
			}
		} else if checker.Implements(reflect.TypeOf((*error)(nil)).Elem()) {
			// func(Value) (T, error)
			filter = func(values []reflect.Value) *reflect.Value {
				if values[1].IsNil() {
					return &values[0]
				}
				return nil
			}
		} else {
			panic(expected)
		}
	} else {
		panic(expected)
	}

	result := reflect.MakeSlice(reflect.SliceOf(outType), 0, set.Len())
	set.ForEach(func(item Value) {
		ret := fVal.Call([]reflect.Value{reflect.ValueOf(item)})
		if val := filter(ret); val != nil {
			result = reflect.Append(result, *val)
		}
	})
	return result.Interface()
}

func (set *ValueSet) Reduce(f func(Value, Value) Value) Value {
	if set.IsEmpty() {
		var defaultVal Value
		return defaultVal
	}
	ret := set.elementSequence[0]
	for _, item := range set.elementSequence[1:] {
		ret = f(ret, item)
	}
	return ret
}

func (set *ValueSet) Fold(init Value, f func(Value, Value) Value) Value {
	if set.IsEmpty() {
		return init
	}
	for _, item := range set.elementSequence {
		init = f(init, item)
	}
	return init
}

func (set *ValueSet) String() string {
	return fmt.Sprint(set.elementSequence)
}

func (set ValueSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(set.ToSlice())
}

func (set *ValueSet) UnmarshalJSON(b []byte) error {
	s := make([]Value, 0)
	err := json.Unmarshal(b, &s)
	if err != nil {
		return err
	}
	*set = *NewValueSetFromSlice(s)
	return nil
}
